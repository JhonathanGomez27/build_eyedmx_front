{"version":3,"file":"default-node_modules_ngx-mask_fesm2022_ngx-mask_mjs.7195391f5dc56c5e.js","mappings":"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","sources":["./node_modules/ngx-mask/fesm2022/ngx-mask.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, inject, Injectable, ElementRef, Renderer2, makeEnvironmentProviders, Directive, Input, Output, HostListener, Pipe } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\n\nconst NGX_MASK_CONFIG = new InjectionToken('ngx-mask config');\nconst NEW_CONFIG = new InjectionToken('new ngx-mask config');\nconst INITIAL_CONFIG = new InjectionToken('initial ngx-mask config');\nconst initialConfig = {\n    suffix: '',\n    prefix: '',\n    thousandSeparator: ' ',\n    decimalMarker: ['.', ','],\n    clearIfNotMatch: false,\n    showTemplate: false,\n    showMaskTyped: false,\n    placeHolderCharacter: '_',\n    dropSpecialCharacters: true,\n    hiddenInput: undefined,\n    shownMaskExpression: '',\n    separatorLimit: '',\n    allowNegativeNumbers: false,\n    validation: true,\n    // eslint-disable-next-line @typescript-eslint/quotes\n    specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n    leadZeroDateTime: false,\n    apm: false,\n    leadZero: false,\n    triggerOnMaskChange: false,\n    maskFilled: new EventEmitter(),\n    patterns: {\n        '0': {\n            pattern: new RegExp('\\\\d'),\n        },\n        '9': {\n            pattern: new RegExp('\\\\d'),\n            optional: true,\n        },\n        X: {\n            pattern: new RegExp('\\\\d'),\n            symbol: '*',\n        },\n        A: {\n            pattern: new RegExp('[a-zA-Z0-9]'),\n        },\n        S: {\n            pattern: new RegExp('[a-zA-Z]'),\n        },\n        U: {\n            pattern: new RegExp('[A-Z]'),\n        },\n        L: {\n            pattern: new RegExp('[a-z]'),\n        },\n        d: {\n            pattern: new RegExp('\\\\d'),\n        },\n        m: {\n            pattern: new RegExp('\\\\d'),\n        },\n        M: {\n            pattern: new RegExp('\\\\d'),\n        },\n        H: {\n            pattern: new RegExp('\\\\d'),\n        },\n        h: {\n            pattern: new RegExp('\\\\d'),\n        },\n        s: {\n            pattern: new RegExp('\\\\d'),\n        },\n    },\n};\nconst timeMasks = [\n    \"Hh:m0:s0\" /* MaskExpression.HOURS_MINUTES_SECONDS */,\n    \"Hh:m0\" /* MaskExpression.HOURS_MINUTES */,\n    \"m0:s0\" /* MaskExpression.MINUTES_SECONDS */,\n];\nconst withoutValidation = [\n    \"percent\" /* MaskExpression.PERCENT */,\n    \"Hh\" /* MaskExpression.HOURS_HOUR */,\n    \"s0\" /* MaskExpression.SECONDS */,\n    \"m0\" /* MaskExpression.MINUTES */,\n    \"separator\" /* MaskExpression.SEPARATOR */,\n    \"d0/M0/0000\" /* MaskExpression.DAYS_MONTHS_YEARS */,\n    \"d0/M0\" /* MaskExpression.DAYS_MONTHS */,\n    \"d0\" /* MaskExpression.DAYS */,\n    \"M0\" /* MaskExpression.MONTHS */,\n];\n\nclass NgxMaskApplierService {\n    constructor() {\n        this._config = inject(NGX_MASK_CONFIG);\n        this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n        this.hiddenInput = this._config.hiddenInput;\n        this.clearIfNotMatch = this._config.clearIfNotMatch;\n        this.specialCharacters = this._config.specialCharacters;\n        this.patterns = this._config.patterns;\n        this.prefix = this._config.prefix;\n        this.suffix = this._config.suffix;\n        this.thousandSeparator = this._config.thousandSeparator;\n        this.decimalMarker = this._config.decimalMarker;\n        this.showMaskTyped = this._config.showMaskTyped;\n        this.placeHolderCharacter = this._config.placeHolderCharacter;\n        this.validation = this._config.validation;\n        this.separatorLimit = this._config.separatorLimit;\n        this.allowNegativeNumbers = this._config.allowNegativeNumbers;\n        this.leadZeroDateTime = this._config.leadZeroDateTime;\n        this.leadZero = this._config.leadZero;\n        this.apm = this._config.apm;\n        this._shift = new Set();\n        this.maskExpression = '';\n        this.actualValue = '';\n        this.shownMaskExpression = '';\n        this.deletedSpecialCharacter = false;\n        this._formatWithSeparators = (str, thousandSeparatorChar, decimalChars, precision) => {\n            let x = [];\n            let decimalChar = '';\n            if (Array.isArray(decimalChars)) {\n                const regExp = new RegExp(decimalChars.map((v) => ('[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v)).join('|'));\n                x = str.split(regExp);\n                decimalChar = str.match(regExp)?.[0] ?? \"\" /* MaskExpression.EMPTY_STRING */;\n            }\n            else {\n                x = str.split(decimalChars);\n                decimalChar = decimalChars;\n            }\n            const decimals = x.length > 1 ? `${decimalChar}${x[1]}` : \"\" /* MaskExpression.EMPTY_STRING */;\n            let res = x[0] ?? \"\" /* MaskExpression.EMPTY_STRING */;\n            const separatorLimit = this.separatorLimit.replace(/\\s/g, \"\" /* MaskExpression.EMPTY_STRING */);\n            if (separatorLimit && +separatorLimit) {\n                if (res[0] === \"-\" /* MaskExpression.MINUS */) {\n                    res = `-${res.slice(1, res.length).slice(0, separatorLimit.length)}`;\n                }\n                else {\n                    res = res.slice(0, separatorLimit.length);\n                }\n            }\n            const rgx = /(\\d+)(\\d{3})/;\n            while (thousandSeparatorChar && rgx.test(res)) {\n                res = res.replace(rgx, '$1' + thousandSeparatorChar + '$2');\n            }\n            if (precision === undefined) {\n                return res + decimals;\n            }\n            else if (precision === 0) {\n                return res;\n            }\n            return res + decimals.substring(0, precision + 1);\n        };\n        this.percentage = (str) => {\n            const sanitizedStr = str.replace(',', '.');\n            const value = Number(sanitizedStr);\n            return !isNaN(value) && value >= 0 && value <= 100;\n        };\n        this.getPrecision = (maskExpression) => {\n            const x = maskExpression.split(\".\" /* MaskExpression.DOT */);\n            if (x.length > 1) {\n                return Number(x[x.length - 1]);\n            }\n            return Infinity;\n        };\n        this.checkAndRemoveSuffix = (inputValue) => {\n            for (let i = this.suffix?.length - 1; i >= 0; i--) {\n                const substr = this.suffix.substring(i, this.suffix?.length);\n                if (inputValue.includes(substr) &&\n                    i !== this.suffix?.length - 1 &&\n                    (i - 1 < 0 ||\n                        !inputValue.includes(this.suffix.substring(i - 1, this.suffix?.length)))) {\n                    return inputValue.replace(substr, \"\" /* MaskExpression.EMPTY_STRING */);\n                }\n            }\n            return inputValue;\n        };\n        this.checkInputPrecision = (inputValue, precision, decimalMarker) => {\n            if (precision < Infinity) {\n                // TODO need think about decimalMarker\n                if (Array.isArray(decimalMarker)) {\n                    const marker = decimalMarker.find((dm) => dm !== this.thousandSeparator);\n                    // eslint-disable-next-line no-param-reassign\n                    decimalMarker = marker ? marker : decimalMarker[0];\n                }\n                const precisionRegEx = new RegExp(this._charToRegExpExpression(decimalMarker) + `\\\\d{${precision}}.*$`);\n                const precisionMatch = inputValue.match(precisionRegEx);\n                const precisionMatchLength = (precisionMatch && precisionMatch[0]?.length) ?? 0;\n                if (precisionMatchLength - 1 > precision) {\n                    const diff = precisionMatchLength - 1 - precision;\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue = inputValue.substring(0, inputValue.length - diff);\n                }\n                if (precision === 0 &&\n                    this._compareOrIncludes(inputValue[inputValue.length - 1], decimalMarker, this.thousandSeparator)) {\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue = inputValue.substring(0, inputValue.length - 1);\n                }\n            }\n            return inputValue;\n        };\n    }\n    applyMaskWithPattern(inputValue, maskAndPattern) {\n        const [mask, customPattern] = maskAndPattern;\n        this.customPattern = customPattern;\n        return this.applyMask(inputValue, mask);\n    }\n    applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, \n    // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n    cb = () => { }) {\n        if (!maskExpression || typeof inputValue !== 'string') {\n            return \"\" /* MaskExpression.EMPTY_STRING */;\n        }\n        let cursor = 0;\n        let result = '';\n        let multi = false;\n        let backspaceShift = false;\n        let shift = 1;\n        let stepBack = false;\n        if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n        }\n        if (!!this.suffix && inputValue?.length > 0) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = this.checkAndRemoveSuffix(inputValue);\n        }\n        if (inputValue === '(' && this.prefix) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = '';\n        }\n        const inputArray = inputValue.toString().split(\"\" /* MaskExpression.EMPTY_STRING */);\n        if (this.allowNegativeNumbers &&\n            inputValue.slice(cursor, cursor + 1) === \"-\" /* MaskExpression.MINUS */) {\n            // eslint-disable-next-line no-param-reassign\n            result += inputValue.slice(cursor, cursor + 1);\n        }\n        if (maskExpression === \"IP\" /* MaskExpression.IP */) {\n            const valuesIP = inputValue.split(\".\" /* MaskExpression.DOT */);\n            this.ipError = this._validIP(valuesIP);\n            // eslint-disable-next-line no-param-reassign\n            maskExpression = '099.099.099.099';\n        }\n        const arr = [];\n        for (let i = 0; i < inputValue.length; i++) {\n            if (inputValue[i]?.match('\\\\d')) {\n                arr.push(inputValue[i] ?? \"\" /* MaskExpression.EMPTY_STRING */);\n            }\n        }\n        if (maskExpression === \"CPF_CNPJ\" /* MaskExpression.CPF_CNPJ */) {\n            this.cpfCnpjError = arr.length !== 11 && arr.length !== 14;\n            if (arr.length > 11) {\n                // eslint-disable-next-line no-param-reassign\n                maskExpression = '00.000.000/0000-00';\n            }\n            else {\n                // eslint-disable-next-line no-param-reassign\n                maskExpression = '000.000.000-00';\n            }\n        }\n        if (maskExpression.startsWith(\"percent\" /* MaskExpression.PERCENT */)) {\n            if (inputValue.match('[a-z]|[A-Z]') ||\n                // eslint-disable-next-line no-useless-escape\n                (inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/.]/) && !backspaced)) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this._stripToDecimal(inputValue);\n                const precision = this.getPrecision(maskExpression);\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n            }\n            const decimalMarker = typeof this.decimalMarker === 'string' ? this.decimalMarker : \".\" /* MaskExpression.DOT */;\n            if (inputValue.indexOf(decimalMarker) > 0 &&\n                !this.percentage(inputValue.substring(0, inputValue.indexOf(decimalMarker)))) {\n                let base = inputValue.substring(0, inputValue.indexOf(decimalMarker) - 1);\n                if (this.allowNegativeNumbers &&\n                    inputValue.slice(cursor, cursor + 1) === \"-\" /* MaskExpression.MINUS */ &&\n                    !backspaced) {\n                    base = inputValue.substring(0, inputValue.indexOf(decimalMarker));\n                }\n                // eslint-disable-next-line no-param-reassign\n                inputValue = `${base}${inputValue.substring(inputValue.indexOf(decimalMarker), inputValue.length)}`;\n            }\n            let value = '';\n            this.allowNegativeNumbers &&\n                inputValue.slice(cursor, cursor + 1) === \"-\" /* MaskExpression.MINUS */\n                ? (value = inputValue.slice(cursor + 1, cursor + inputValue.length))\n                : (value = inputValue);\n            if (this.percentage(value)) {\n                result = this._splitPercentZero(inputValue);\n            }\n            else {\n                result = this._splitPercentZero(inputValue.substring(0, inputValue.length - 1));\n            }\n        }\n        else if (maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */)) {\n            if (inputValue.match('[wа-яА-Я]') ||\n                inputValue.match('[ЁёА-я]') ||\n                inputValue.match('[a-z]|[A-Z]') ||\n                inputValue.match(/[-@#!$%\\\\^&*()_£¬'+|~=`{}\\]:\";<>.?/]/) ||\n                inputValue.match('[^A-Za-z0-9,]')) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this._stripToDecimal(inputValue);\n            }\n            // eslint-disable-next-line no-param-reassign\n            inputValue =\n                inputValue.length > 1 &&\n                    inputValue[0] === '0' &&\n                    inputValue[1] !== this.thousandSeparator &&\n                    !this._compareOrIncludes(inputValue[1], this.decimalMarker, this.thousandSeparator) &&\n                    !backspaced\n                    ? inputValue.slice(0, inputValue.length - 1)\n                    : inputValue;\n            if (backspaced) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this._compareOrIncludes(inputValue[inputValue.length - 1], this.decimalMarker, this.thousandSeparator)\n                    ? inputValue.slice(0, inputValue.length - 1)\n                    : inputValue;\n            }\n            // TODO: we had different rexexps here for the different cases... but tests dont seam to bother - check this\n            //  separator: no COMMA, dot-sep: no SPACE, COMMA OK, comma-sep: no SPACE, COMMA OK\n            const thousandSeparatorCharEscaped = this._charToRegExpExpression(this.thousandSeparator);\n            let invalidChars = '@#!$%^&*()_+|~=`{}\\\\[\\\\]:\\\\s,\\\\.\";<>?\\\\/'.replace(thousandSeparatorCharEscaped, '');\n            //.replace(decimalMarkerEscaped, '');\n            if (Array.isArray(this.decimalMarker)) {\n                for (const marker of this.decimalMarker) {\n                    invalidChars = invalidChars.replace(this._charToRegExpExpression(marker), \"\" /* MaskExpression.EMPTY_STRING */);\n                }\n            }\n            else {\n                invalidChars = invalidChars.replace(this._charToRegExpExpression(this.decimalMarker), '');\n            }\n            const invalidCharRegexp = new RegExp('[' + invalidChars + ']');\n            if (inputValue.match(invalidCharRegexp) ||\n                (inputValue.length === 1 &&\n                    this._compareOrIncludes(inputValue, this.decimalMarker, this.thousandSeparator))) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = inputValue.substring(0, inputValue.length - 1);\n            }\n            const precision = this.getPrecision(maskExpression);\n            // eslint-disable-next-line no-param-reassign\n            inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n            const strForSep = inputValue.replace(new RegExp(thousandSeparatorCharEscaped, 'g'), '');\n            result = this._formatWithSeparators(strForSep, this.thousandSeparator, this.decimalMarker, precision);\n            const commaShift = result.indexOf(\",\" /* MaskExpression.COMMA */) - inputValue.indexOf(\",\" /* MaskExpression.COMMA */);\n            const shiftStep = result.length - inputValue.length;\n            if (shiftStep > 0 && result[position] !== this.thousandSeparator) {\n                backspaceShift = true;\n                let _shift = 0;\n                do {\n                    this._shift.add(position + _shift);\n                    _shift++;\n                } while (_shift < shiftStep);\n            }\n            else if (result[position - 1] === this.decimalMarker ||\n                shiftStep === -4 ||\n                shiftStep === -3) {\n                this._shift.clear();\n                this._shift.add(position - 1);\n            }\n            else if ((commaShift !== 0 &&\n                position > 0 &&\n                !(result.indexOf(\",\" /* MaskExpression.COMMA */) >= position && position > 3)) ||\n                (!(result.indexOf(\".\" /* MaskExpression.DOT */) >= position && position > 3) &&\n                    shiftStep <= 0)) {\n                this._shift.clear();\n                backspaceShift = true;\n                shift = shiftStep;\n                // eslint-disable-next-line no-param-reassign\n                position += shiftStep;\n                this._shift.add(position);\n            }\n            else {\n                this._shift.clear();\n            }\n        }\n        else {\n            for (\n            // eslint-disable-next-line\n            let i = 0, inputSymbol = inputArray[0]; i < inputArray.length; i++, inputSymbol = inputArray[i] ?? \"\" /* MaskExpression.EMPTY_STRING */) {\n                if (cursor === maskExpression.length) {\n                    break;\n                }\n                const symbolStarInPattern = \"*\" /* MaskExpression.SYMBOL_STAR */ in this.patterns;\n                if (this._checkSymbolMask(inputSymbol, maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */) &&\n                    maskExpression[cursor + 1] === \"?\" /* MaskExpression.SYMBOL_QUESTION */) {\n                    result += inputSymbol;\n                    cursor += 2;\n                }\n                else if (maskExpression[cursor + 1] === \"*\" /* MaskExpression.SYMBOL_STAR */ &&\n                    multi &&\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2] ?? \"\" /* MaskExpression.EMPTY_STRING */)) {\n                    result += inputSymbol;\n                    cursor += 3;\n                    multi = false;\n                }\n                else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */) &&\n                    maskExpression[cursor + 1] === \"*\" /* MaskExpression.SYMBOL_STAR */ &&\n                    !symbolStarInPattern) {\n                    result += inputSymbol;\n                    multi = true;\n                }\n                else if (maskExpression[cursor + 1] === \"?\" /* MaskExpression.SYMBOL_QUESTION */ &&\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2] ?? \"\" /* MaskExpression.EMPTY_STRING */)) {\n                    result += inputSymbol;\n                    cursor += 3;\n                }\n                else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */)) {\n                    if (maskExpression[cursor] === \"H\" /* MaskExpression.HOURS */) {\n                        if (this.apm ? Number(inputSymbol) > 9 : Number(inputSymbol) > 2) {\n                            // eslint-disable-next-line no-param-reassign\n                            position = position + 1;\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === \"h\" /* MaskExpression.HOUR */) {\n                        if (this.apm\n                            ? (result.length === 1 && Number(result) > 1) ||\n                                (result === '1' && Number(inputSymbol) > 1) ||\n                                (inputValue.slice(cursor - 1, cursor).length === 1 &&\n                                    Number(inputValue.slice(cursor - 1, cursor)) > 1) ||\n                                (inputValue.slice(cursor - 1, cursor) === '1' &&\n                                    Number(inputSymbol) > 1)\n                            : (result === '2' && Number(inputSymbol) > 3) ||\n                                ((result.slice(cursor - 2, cursor) === '2' ||\n                                    result.slice(cursor - 3, cursor) === '2' ||\n                                    result.slice(cursor - 4, cursor) === '2' ||\n                                    result.slice(cursor - 1, cursor) === '2') &&\n                                    Number(inputSymbol) > 3 &&\n                                    cursor > 10)) {\n                            // eslint-disable-next-line no-param-reassign\n                            position = position + 1;\n                            cursor += 1;\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === \"m\" /* MaskExpression.MINUTE */ ||\n                        maskExpression[cursor] === \"s\" /* MaskExpression.SECOND */) {\n                        if (Number(inputSymbol) > 5) {\n                            // eslint-disable-next-line no-param-reassign\n                            position = position + 1;\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    const daysCount = 31;\n                    const inputValueCursor = inputValue[cursor];\n                    const inputValueCursorPlusOne = inputValue[cursor + 1];\n                    const inputValueCursorPlusTwo = inputValue[cursor + 2];\n                    const inputValueCursorMinusOne = inputValue[cursor - 1];\n                    const inputValueCursorMinusTwo = inputValue[cursor - 2];\n                    const inputValueCursorMinusThree = inputValue[cursor - 3];\n                    const inputValueSliceMinusThreeMinusOne = inputValue.slice(cursor - 3, cursor - 1);\n                    const inputValueSliceMinusOnePlusOne = inputValue.slice(cursor - 1, cursor + 1);\n                    const inputValueSliceCursorPlusTwo = inputValue.slice(cursor, cursor + 2);\n                    const inputValueSliceMinusTwoCursor = inputValue.slice(cursor - 2, cursor);\n                    if (maskExpression[cursor] === \"d\" /* MaskExpression.DAY */) {\n                        const maskStartWithMonth = maskExpression.slice(0, 2) === \"M0\" /* MaskExpression.MONTHS */;\n                        const startWithMonthInput = maskExpression.slice(0, 2) === \"M0\" /* MaskExpression.MONTHS */ &&\n                            this.specialCharacters.includes(inputValueCursorMinusTwo);\n                        if ((Number(inputSymbol) > 3 && this.leadZeroDateTime) ||\n                            (!maskStartWithMonth &&\n                                (Number(inputValueSliceCursorPlusTwo) > daysCount ||\n                                    Number(inputValueSliceMinusOnePlusOne) > daysCount ||\n                                    this.specialCharacters.includes(inputValueCursorPlusOne))) ||\n                            (startWithMonthInput\n                                ? Number(inputValueSliceMinusOnePlusOne) > daysCount ||\n                                    (!this.specialCharacters.includes(inputValueCursor) &&\n                                        this.specialCharacters.includes(inputValueCursorPlusTwo)) ||\n                                    this.specialCharacters.includes(inputValueCursor)\n                                : Number(inputValueSliceCursorPlusTwo) > daysCount ||\n                                    this.specialCharacters.includes(inputValueCursorPlusOne))) {\n                            // eslint-disable-next-line no-param-reassign\n                            position = position + 1;\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === \"M\" /* MaskExpression.MONTH */) {\n                        const monthsCount = 12;\n                        // mask without day\n                        const withoutDays = cursor === 0 &&\n                            (Number(inputSymbol) > 2 ||\n                                Number(inputValueSliceCursorPlusTwo) > monthsCount ||\n                                this.specialCharacters.includes(inputValueCursorPlusOne));\n                        // day<10 && month<12 for input\n                        const specialChart = maskExpression.slice(cursor + 2, cursor + 3);\n                        const day1monthInput = inputValueSliceMinusThreeMinusOne.includes(specialChart) &&\n                            ((this.specialCharacters.includes(inputValueCursorMinusTwo) &&\n                                Number(inputValueSliceMinusOnePlusOne) > monthsCount &&\n                                !this.specialCharacters.includes(inputValueCursor)) ||\n                                this.specialCharacters.includes(inputValueCursor) ||\n                                (this.specialCharacters.includes(inputValueCursorMinusThree) &&\n                                    Number(inputValueSliceMinusTwoCursor) > monthsCount &&\n                                    !this.specialCharacters.includes(inputValueCursorMinusOne)) ||\n                                this.specialCharacters.includes(inputValueCursorMinusOne));\n                        //  month<12 && day<10 for input\n                        const day2monthInput = Number(inputValueSliceMinusThreeMinusOne) <= daysCount &&\n                            !this.specialCharacters.includes(inputValueSliceMinusThreeMinusOne) &&\n                            this.specialCharacters.includes(inputValueCursorMinusOne) &&\n                            (Number(inputValueSliceCursorPlusTwo) > monthsCount ||\n                                this.specialCharacters.includes(inputValueCursorPlusOne));\n                        // cursor === 5 && without days\n                        const day2monthInputDot = (Number(inputValueSliceCursorPlusTwo) > monthsCount && cursor === 5) ||\n                            (this.specialCharacters.includes(inputValueCursorPlusOne) &&\n                                cursor === 5);\n                        // // day<10 && month<12 for paste whole data\n                        const day1monthPaste = Number(inputValueSliceMinusThreeMinusOne) > daysCount &&\n                            !this.specialCharacters.includes(inputValueSliceMinusThreeMinusOne) &&\n                            !this.specialCharacters.includes(inputValueSliceMinusTwoCursor) &&\n                            Number(inputValueSliceMinusTwoCursor) > monthsCount;\n                        // 10<day<31 && month<12 for paste whole data\n                        const day2monthPaste = Number(inputValueSliceMinusThreeMinusOne) <= daysCount &&\n                            !this.specialCharacters.includes(inputValueSliceMinusThreeMinusOne) &&\n                            !this.specialCharacters.includes(inputValueCursorMinusOne) &&\n                            Number(inputValueSliceMinusOnePlusOne) > monthsCount;\n                        if ((Number(inputSymbol) > 1 && this.leadZeroDateTime) ||\n                            withoutDays ||\n                            day1monthInput ||\n                            day2monthPaste ||\n                            day1monthPaste ||\n                            day2monthInput ||\n                            (day2monthInputDot && !this.leadZeroDateTime)) {\n                            // eslint-disable-next-line no-param-reassign\n                            position = position + 1;\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    result += inputSymbol;\n                    cursor++;\n                }\n                else if ((inputSymbol === \" \" /* MaskExpression.WHITE_SPACE */ &&\n                    maskExpression[cursor] === \" \" /* MaskExpression.WHITE_SPACE */) ||\n                    (inputSymbol === \"/\" /* MaskExpression.SLASH */ &&\n                        maskExpression[cursor] === \"/\" /* MaskExpression.SLASH */)) {\n                    result += inputSymbol;\n                    cursor++;\n                }\n                else if (this.specialCharacters.indexOf(maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */) !== -1) {\n                    result += maskExpression[cursor];\n                    cursor++;\n                    this._shiftStep(maskExpression, cursor, inputArray.length);\n                    i--;\n                }\n                else if (maskExpression[cursor] === \"9\" /* MaskExpression.NUMBER_NINE */ &&\n                    this.showMaskTyped) {\n                    this._shiftStep(maskExpression, cursor, inputArray.length);\n                }\n                else if (this.patterns[maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */] &&\n                    this.patterns[maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */]?.optional) {\n                    if (!!inputArray[cursor] &&\n                        maskExpression !== '099.099.099.099' &&\n                        maskExpression !== '000.000.000-00' &&\n                        maskExpression !== '00.000.000/0000-00' &&\n                        !maskExpression.match(/^9+\\.0+$/) &&\n                        !this.patterns[maskExpression[cursor] ?? \"\" /* MaskExpression.EMPTY_STRING */]\n                            ?.optional) {\n                        result += inputArray[cursor];\n                    }\n                    if (maskExpression.includes(\"9\" /* MaskExpression.NUMBER_NINE */ + \"*\" /* MaskExpression.SYMBOL_STAR */) &&\n                        maskExpression.includes(\"0\" /* MaskExpression.NUMBER_ZERO */ + \"*\" /* MaskExpression.SYMBOL_STAR */)) {\n                        cursor++;\n                    }\n                    cursor++;\n                    i--;\n                }\n                else if (this.maskExpression[cursor + 1] === \"*\" /* MaskExpression.SYMBOL_STAR */ &&\n                    this._findSpecialChar(this.maskExpression[cursor + 2] ?? \"\" /* MaskExpression.EMPTY_STRING */) &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi) {\n                    cursor += 3;\n                    result += inputSymbol;\n                }\n                else if (this.maskExpression[cursor + 1] === \"?\" /* MaskExpression.SYMBOL_QUESTION */ &&\n                    this._findSpecialChar(this.maskExpression[cursor + 2] ?? \"\" /* MaskExpression.EMPTY_STRING */) &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi) {\n                    cursor += 3;\n                    result += inputSymbol;\n                }\n                else if (this.showMaskTyped &&\n                    this.specialCharacters.indexOf(inputSymbol) < 0 &&\n                    inputSymbol !== this.placeHolderCharacter &&\n                    this.placeHolderCharacter.length === 1) {\n                    stepBack = true;\n                }\n            }\n        }\n        if (result.length + 1 === maskExpression.length &&\n            this.specialCharacters.indexOf(maskExpression[maskExpression.length - 1] ?? \"\" /* MaskExpression.EMPTY_STRING */) !== -1) {\n            result += maskExpression[maskExpression.length - 1];\n        }\n        let newPosition = position + 1;\n        while (this._shift.has(newPosition)) {\n            shift++;\n            newPosition++;\n        }\n        let actualShift = justPasted && !maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */)\n            ? cursor\n            : this._shift.has(position)\n                ? shift\n                : 0;\n        if (stepBack) {\n            actualShift--;\n        }\n        cb(actualShift, backspaceShift);\n        if (shift < 0) {\n            this._shift.clear();\n        }\n        let onlySpecial = false;\n        if (backspaced) {\n            onlySpecial = inputArray.every((char) => this.specialCharacters.includes(char));\n        }\n        let res = `${this.prefix}${onlySpecial ? \"\" /* MaskExpression.EMPTY_STRING */ : result}${this.suffix}`;\n        if (result.length === 0) {\n            res = !this.dropSpecialCharacters ? `${this.prefix}${result}` : `${result}`;\n        }\n        return res;\n    }\n    _findSpecialChar(inputSymbol) {\n        return this.specialCharacters.find((val) => val === inputSymbol);\n    }\n    _checkSymbolMask(inputSymbol, maskSymbol) {\n        this.patterns = this.customPattern ? this.customPattern : this.patterns;\n        return ((this.patterns[maskSymbol]?.pattern &&\n            this.patterns[maskSymbol]?.pattern.test(inputSymbol)) ??\n            false);\n    }\n    _stripToDecimal(str) {\n        return str\n            .split(\"\" /* MaskExpression.EMPTY_STRING */)\n            .filter((i, idx) => {\n            const isDecimalMarker = typeof this.decimalMarker === 'string'\n                ? i === this.decimalMarker\n                : // TODO (inepipenko) use utility type\n                    this.decimalMarker.includes(i);\n            return (i.match('^-?\\\\d') ||\n                i === this.thousandSeparator ||\n                isDecimalMarker ||\n                (i === \"-\" /* MaskExpression.MINUS */ && idx === 0 && this.allowNegativeNumbers));\n        })\n            .join(\"\" /* MaskExpression.EMPTY_STRING */);\n    }\n    _charToRegExpExpression(char) {\n        // if (Array.isArray(char)) {\n        // \treturn char.map((v) => ('[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v)).join('|');\n        // }\n        if (char) {\n            const charsToEscape = '[\\\\^$.|?*+()';\n            return char === ' ' ? '\\\\s' : charsToEscape.indexOf(char) >= 0 ? `\\\\${char}` : char;\n        }\n        return char;\n    }\n    _shiftStep(maskExpression, cursor, inputLength) {\n        const shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor))\n            ? inputLength\n            : cursor;\n        this._shift.add(shiftStep + this.prefix.length || 0);\n    }\n    _compareOrIncludes(value, comparedValue, excludedValue) {\n        return Array.isArray(comparedValue)\n            ? comparedValue.filter((v) => v !== excludedValue).includes(value)\n            : value === comparedValue;\n    }\n    _validIP(valuesIP) {\n        return !(valuesIP.length === 4 &&\n            !valuesIP.some((value, index) => {\n                if (valuesIP.length !== index + 1) {\n                    return value === \"\" /* MaskExpression.EMPTY_STRING */ || Number(value) > 255;\n                }\n                return value === \"\" /* MaskExpression.EMPTY_STRING */ || Number(value.substring(0, 3)) > 255;\n            }));\n    }\n    _splitPercentZero(value) {\n        const decimalIndex = typeof this.decimalMarker === 'string'\n            ? value.indexOf(this.decimalMarker)\n            : value.indexOf(\".\" /* MaskExpression.DOT */);\n        if (decimalIndex === -1) {\n            const parsedValue = parseInt(value, 10);\n            return isNaN(parsedValue) ? \"\" /* MaskExpression.EMPTY_STRING */ : parsedValue.toString();\n        }\n        else {\n            const integerPart = parseInt(value.substring(0, decimalIndex), 10);\n            const decimalPart = value.substring(decimalIndex + 1);\n            const integerString = isNaN(integerPart) ? '' : integerPart.toString();\n            const decimal = typeof this.decimalMarker === 'string' ? this.decimalMarker : \".\" /* MaskExpression.DOT */;\n            return integerString === \"\" /* MaskExpression.EMPTY_STRING */\n                ? \"\" /* MaskExpression.EMPTY_STRING */\n                : integerString + decimal + decimalPart;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.8\", ngImport: i0, type: NgxMaskApplierService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.8\", ngImport: i0, type: NgxMaskApplierService }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.8\", ngImport: i0, type: NgxMaskApplierService, decorators: [{\n            type: Injectable\n        }] });\n\nclass NgxMaskService extends NgxMaskApplierService {\n    constructor() {\n        super(...arguments);\n        this.isNumberValue = false;\n        this.maskIsShown = '';\n        this.selStart = null;\n        this.selEnd = null;\n        /**\n         * Whether we are currently in writeValue function, in this case when applying the mask we don't want to trigger onChange function,\n         * since writeValue should be a one way only process of writing the DOM value based on the Angular model value.\n         */\n        this.writingValue = false;\n        this.maskChanged = false;\n        this._maskExpressionArray = [];\n        this.triggerOnMaskChange = false;\n        this._emitValue = false;\n        this._previousValue = '';\n        this._currentValue = '';\n        // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n        this.onChange = (_) => { };\n        this.document = inject(DOCUMENT);\n        this._config = inject(NGX_MASK_CONFIG);\n        this._elementRef = inject(ElementRef, { optional: true });\n        this._renderer = inject(Renderer2, { optional: true });\n    }\n    // eslint-disable-next-line complexity\n    applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, \n    // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n    cb = () => { }) {\n        if (!maskExpression) {\n            return inputValue !== this.actualValue ? this.actualValue : inputValue;\n        }\n        this.maskIsShown = this.showMaskTyped\n            ? this.showMaskInInput()\n            : \"\" /* MaskExpression.EMPTY_STRING */;\n        if (this.maskExpression === \"IP\" /* MaskExpression.IP */ && this.showMaskTyped) {\n            this.maskIsShown = this.showMaskInInput(inputValue || \"#\" /* MaskExpression.HASH */);\n        }\n        if (this.maskExpression === \"CPF_CNPJ\" /* MaskExpression.CPF_CNPJ */ && this.showMaskTyped) {\n            this.maskIsShown = this.showMaskInInput(inputValue || \"#\" /* MaskExpression.HASH */);\n        }\n        if (!inputValue && this.showMaskTyped) {\n            this.formControlResult(this.prefix);\n            return this.prefix + this.maskIsShown;\n        }\n        const getSymbol = !!inputValue && typeof this.selStart === 'number'\n            ? inputValue[this.selStart] ?? \"\" /* MaskExpression.EMPTY_STRING */\n            : \"\" /* MaskExpression.EMPTY_STRING */;\n        let newInputValue = '';\n        if (this.hiddenInput !== undefined && !this.writingValue) {\n            let actualResult = inputValue && inputValue.length === 1\n                ? inputValue.split(\"\" /* MaskExpression.EMPTY_STRING */)\n                : this.actualValue.split(\"\" /* MaskExpression.EMPTY_STRING */);\n            // eslint-disable  @typescript-eslint/no-unused-expressions\n            // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n            if (typeof this.selStart === 'object' && typeof this.selEnd === 'object') {\n                this.selStart = Number(this.selStart);\n                this.selEnd = Number(this.selEnd);\n            }\n            else {\n                inputValue !== \"\" /* MaskExpression.EMPTY_STRING */ && actualResult.length\n                    ? typeof this.selStart === 'number' && typeof this.selEnd === 'number'\n                        ? inputValue.length > actualResult.length\n                            ? actualResult.splice(this.selStart, 0, getSymbol)\n                            : inputValue.length < actualResult.length\n                                ? actualResult.length - inputValue.length === 1\n                                    ? backspaced\n                                        ? actualResult.splice(this.selStart - 1, 1)\n                                        : actualResult.splice(inputValue.length - 1, 1)\n                                    : actualResult.splice(this.selStart, this.selEnd - this.selStart)\n                                : null\n                        : null\n                    : (actualResult = []);\n            }\n            if (this.showMaskTyped) {\n                if (!this.hiddenInput) {\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue = this.removeMask(inputValue);\n                }\n            }\n            // eslint-enable  @typescript-eslint/no-unused-expressions\n            newInputValue =\n                this.actualValue.length && actualResult.length <= inputValue.length\n                    ? this.shiftTypedSymbols(actualResult.join(\"\" /* MaskExpression.EMPTY_STRING */))\n                    : inputValue;\n        }\n        if (justPasted && (this.hiddenInput || !this.hiddenInput)) {\n            newInputValue = inputValue;\n        }\n        if (this.deletedSpecialCharacter && position) {\n            if (this.specialCharacters.includes(this.actualValue.slice(position, position + 1))) {\n                // eslint-disable-next-line no-param-reassign\n                position = position + 1;\n            }\n            else if (maskExpression.slice(position - 1, position + 1) !== \"M0\" /* MaskExpression.MONTHS */) {\n                // eslint-disable-next-line no-param-reassign\n                position = position - 2;\n            }\n            // eslint-disable-next-line no-param-reassign\n            this.deletedSpecialCharacter = false;\n        }\n        if (this.showMaskTyped &&\n            this.placeHolderCharacter.length === 1 &&\n            !this.leadZeroDateTime) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = this.removeMask(inputValue);\n        }\n        if (this.maskChanged) {\n            newInputValue = inputValue;\n        }\n        else {\n            newInputValue =\n                Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\n        }\n        const result = super.applyMask(newInputValue, maskExpression, position, justPasted, backspaced, cb);\n        this.actualValue = this.getActualValue(result);\n        // handle some separator implications:\n        // a.) adjust decimalMarker default (. -> ,) if thousandSeparator is a dot\n        if (this.thousandSeparator === \".\" /* MaskExpression.DOT */ &&\n            this.decimalMarker === \".\" /* MaskExpression.DOT */) {\n            this.decimalMarker = \",\" /* MaskExpression.COMMA */;\n        }\n        // b) remove decimal marker from list of special characters to mask\n        if (this.maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */) &&\n            this.dropSpecialCharacters === true) {\n            this.specialCharacters = this.specialCharacters.filter((item) => !this._compareOrIncludes(item, this.decimalMarker, this.thousandSeparator) //item !== this.decimalMarker, // !\n            );\n        }\n        if (result || result === '') {\n            this._previousValue = this._currentValue;\n            this._currentValue = result;\n            this._emitValue = this._previousValue !== this._currentValue || this.maskChanged;\n        }\n        this._emitValue ? this.formControlResult(result) : '';\n        if (!this.showMaskTyped || (this.showMaskTyped && this.hiddenInput)) {\n            if (this.hiddenInput) {\n                if (backspaced) {\n                    return this.hideInput(result, this.maskExpression);\n                }\n                return (this.hideInput(result, this.maskExpression) +\n                    this.maskIsShown.slice(result.length));\n            }\n            return result;\n        }\n        const resLen = result.length;\n        const prefNmask = this.prefix + this.maskIsShown;\n        if (this.maskExpression.includes(\"H\" /* MaskExpression.HOURS */)) {\n            const countSkipedSymbol = this._numberSkipedSymbols(result);\n            return result + prefNmask.slice(resLen + countSkipedSymbol);\n        }\n        else if (this.maskExpression === \"IP\" /* MaskExpression.IP */ ||\n            this.maskExpression === \"CPF_CNPJ\" /* MaskExpression.CPF_CNPJ */) {\n            return result + prefNmask;\n        }\n        return result + prefNmask.slice(resLen);\n    }\n    // get the number of characters that were shifted\n    _numberSkipedSymbols(value) {\n        const regex = /(^|\\D)(\\d\\D)/g;\n        let match = regex.exec(value);\n        let countSkipedSymbol = 0;\n        while (match != null) {\n            countSkipedSymbol += 1;\n            match = regex.exec(value);\n        }\n        return countSkipedSymbol;\n    }\n    applyValueChanges(position, justPasted, backspaced, \n    // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n    cb = () => { }) {\n        const formElement = this._elementRef?.nativeElement;\n        if (!formElement) {\n            return;\n        }\n        formElement.value = this.applyMask(formElement.value, this.maskExpression, position, justPasted, backspaced, cb);\n        if (formElement === this._getActiveElement()) {\n            return;\n        }\n        this.clearIfNotMatchFn();\n    }\n    hideInput(inputValue, maskExpression) {\n        return inputValue\n            .split(\"\" /* MaskExpression.EMPTY_STRING */)\n            .map((curr, index) => {\n            if (this.patterns &&\n                this.patterns[maskExpression[index] ?? \"\" /* MaskExpression.EMPTY_STRING */] &&\n                this.patterns[maskExpression[index] ?? \"\" /* MaskExpression.EMPTY_STRING */]?.symbol) {\n                return this.patterns[maskExpression[index] ?? \"\" /* MaskExpression.EMPTY_STRING */]\n                    ?.symbol;\n            }\n            return curr;\n        })\n            .join(\"\" /* MaskExpression.EMPTY_STRING */);\n    }\n    // this function is not necessary, it checks result against maskExpression\n    getActualValue(res) {\n        const compare = res\n            .split(\"\" /* MaskExpression.EMPTY_STRING */)\n            .filter((symbol, i) => {\n            const maskChar = this.maskExpression[i] ?? \"\" /* MaskExpression.EMPTY_STRING */;\n            return (this._checkSymbolMask(symbol, maskChar) ||\n                (this.specialCharacters.includes(maskChar) && symbol === maskChar));\n        });\n        if (compare.join(\"\" /* MaskExpression.EMPTY_STRING */) === res) {\n            return compare.join(\"\" /* MaskExpression.EMPTY_STRING */);\n        }\n        return res;\n    }\n    shiftTypedSymbols(inputValue) {\n        let symbolToReplace = '';\n        const newInputValue = (inputValue &&\n            inputValue\n                .split(\"\" /* MaskExpression.EMPTY_STRING */)\n                .map((currSymbol, index) => {\n                if (this.specialCharacters.includes(inputValue[index + 1] ?? \"\" /* MaskExpression.EMPTY_STRING */) &&\n                    inputValue[index + 1] !== this.maskExpression[index + 1]) {\n                    symbolToReplace = currSymbol;\n                    return inputValue[index + 1];\n                }\n                if (symbolToReplace.length) {\n                    const replaceSymbol = symbolToReplace;\n                    symbolToReplace = \"\" /* MaskExpression.EMPTY_STRING */;\n                    return replaceSymbol;\n                }\n                return currSymbol;\n            })) ||\n            [];\n        return newInputValue.join(\"\" /* MaskExpression.EMPTY_STRING */);\n    }\n    /**\n     * Convert number value to string\n     * 3.1415 -> '3.1415'\n     * 1e-7 -> '0.0000001'\n     */\n    numberToString(value) {\n        if ((!value && value !== 0) ||\n            (this.maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */) &&\n                (this.leadZero || !this.dropSpecialCharacters)) ||\n            (this.maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */) &&\n                this.separatorLimit.length > 14 &&\n                String(value).length > 14)) {\n            return String(value);\n        }\n        return Number(value)\n            .toLocaleString('fullwide', {\n            useGrouping: false,\n            maximumFractionDigits: 20,\n        })\n            .replace(`/${\"-\" /* MaskExpression.MINUS */}/`, \"-\" /* MaskExpression.MINUS */);\n    }\n    showMaskInInput(inputVal) {\n        if (this.showMaskTyped && !!this.shownMaskExpression) {\n            if (this.maskExpression.length !== this.shownMaskExpression.length) {\n                throw new Error('Mask expression must match mask placeholder length');\n            }\n            else {\n                return this.shownMaskExpression;\n            }\n        }\n        else if (this.showMaskTyped) {\n            if (inputVal) {\n                if (this.maskExpression === \"IP\" /* MaskExpression.IP */) {\n                    return this._checkForIp(inputVal);\n                }\n                if (this.maskExpression === \"CPF_CNPJ\" /* MaskExpression.CPF_CNPJ */) {\n                    return this._checkForCpfCnpj(inputVal);\n                }\n            }\n            if (this.placeHolderCharacter.length === this.maskExpression.length) {\n                return this.placeHolderCharacter;\n            }\n            return this.maskExpression.replace(/\\w/g, this.placeHolderCharacter);\n        }\n        return '';\n    }\n    clearIfNotMatchFn() {\n        const formElement = this._elementRef?.nativeElement;\n        if (!formElement) {\n            return;\n        }\n        if (this.clearIfNotMatch &&\n            this.prefix.length + this.maskExpression.length + this.suffix.length !==\n                formElement.value.replace(this.placeHolderCharacter, \"\" /* MaskExpression.EMPTY_STRING */)\n                    .length) {\n            this.formElementProperty = ['value', \"\" /* MaskExpression.EMPTY_STRING */];\n            this.applyMask('', this.maskExpression);\n        }\n    }\n    set formElementProperty([name, value]) {\n        if (!this._renderer || !this._elementRef) {\n            return;\n        }\n        Promise.resolve().then(() => this._renderer?.setProperty(this._elementRef?.nativeElement, name, value));\n    }\n    checkSpecialCharAmount(mask) {\n        const chars = mask\n            .split(\"\" /* MaskExpression.EMPTY_STRING */)\n            .filter((item) => this._findSpecialChar(item));\n        return chars.length;\n    }\n    removeMask(inputValue) {\n        return this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.specialCharacters.concat('_').concat(this.placeHolderCharacter));\n    }\n    _checkForIp(inputVal) {\n        if (inputVal === \"#\" /* MaskExpression.HASH */) {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        const arr = [];\n        for (let i = 0; i < inputVal.length; i++) {\n            const value = inputVal[i] ?? \"\" /* MaskExpression.EMPTY_STRING */;\n            if (!value) {\n                continue;\n            }\n            if (value.match('\\\\d')) {\n                arr.push(value);\n            }\n        }\n        if (arr.length <= 3) {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        if (arr.length > 3 && arr.length <= 6) {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        if (arr.length > 6 && arr.length <= 9) {\n            return this.placeHolderCharacter;\n        }\n        if (arr.length > 9 && arr.length <= 12) {\n            return '';\n        }\n        return '';\n    }\n    _checkForCpfCnpj(inputVal) {\n        const cpf = `${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n        const cnpj = `${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `/${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n        if (inputVal === \"#\" /* MaskExpression.HASH */) {\n            return cpf;\n        }\n        const arr = [];\n        for (let i = 0; i < inputVal.length; i++) {\n            const value = inputVal[i] ?? \"\" /* MaskExpression.EMPTY_STRING */;\n            if (!value) {\n                continue;\n            }\n            if (value.match('\\\\d')) {\n                arr.push(value);\n            }\n        }\n        if (arr.length <= 3) {\n            return cpf.slice(arr.length, cpf.length);\n        }\n        if (arr.length > 3 && arr.length <= 6) {\n            return cpf.slice(arr.length + 1, cpf.length);\n        }\n        if (arr.length > 6 && arr.length <= 9) {\n            return cpf.slice(arr.length + 2, cpf.length);\n        }\n        if (arr.length > 9 && arr.length < 11) {\n            return cpf.slice(arr.length + 3, cpf.length);\n        }\n        if (arr.length === 11) {\n            return '';\n        }\n        if (arr.length === 12) {\n            if (inputVal.length === 17) {\n                return cnpj.slice(16, cnpj.length);\n            }\n            return cnpj.slice(15, cnpj.length);\n        }\n        if (arr.length > 12 && arr.length <= 14) {\n            return cnpj.slice(arr.length + 4, cnpj.length);\n        }\n        return '';\n    }\n    /**\n     * Recursively determine the current active element by navigating the Shadow DOM until the Active Element is found.\n     */\n    _getActiveElement(document = this.document) {\n        const shadowRootEl = document?.activeElement?.shadowRoot;\n        if (!shadowRootEl?.activeElement) {\n            return document.activeElement;\n        }\n        else {\n            return this._getActiveElement(shadowRootEl);\n        }\n    }\n    /**\n     * Propogates the input value back to the Angular model by triggering the onChange function. It won't do this if writingValue\n     * is true. If that is true it means we are currently in the writeValue function, which is supposed to only update the actual\n     * DOM element based on the Angular model value. It should be a one way process, i.e. writeValue should not be modifying the Angular\n     * model value too. Therefore, we don't trigger onChange in this scenario.\n     * @param inputValue the current form input value\n     */\n    formControlResult(inputValue) {\n        if (this.writingValue || (!this.triggerOnMaskChange && this.maskChanged)) {\n            this.maskChanged\n                ? this.onChange(this._toNumber(this._checkSymbols(this._removeSuffix(this._removePrefix(inputValue)))))\n                : '';\n            this.maskChanged = false;\n            return;\n        }\n        if (Array.isArray(this.dropSpecialCharacters)) {\n            this.onChange(this._toNumber(this._checkSymbols(this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.dropSpecialCharacters))));\n        }\n        else if (this.dropSpecialCharacters ||\n            (!this.dropSpecialCharacters && this.prefix === inputValue)) {\n            this.onChange(this._toNumber(this._checkSymbols(this._removeSuffix(this._removePrefix(inputValue)))));\n        }\n        else {\n            this.onChange(this._toNumber(inputValue));\n        }\n    }\n    _toNumber(value) {\n        if (!this.isNumberValue || value === \"\" /* MaskExpression.EMPTY_STRING */) {\n            return value;\n        }\n        if (this.maskExpression.startsWith(\"separator\" /* MaskExpression.SEPARATOR */) &&\n            (this.leadZero || !this.dropSpecialCharacters)) {\n            return value;\n        }\n        if (String(value).length > 16 && this.separatorLimit.length > 14) {\n            return String(value);\n        }\n        const num = Number(value);\n        return Number.isNaN(num) ? value : num;\n    }\n    _removeMask(value, specialCharactersForRemove) {\n        if (this.maskExpression.startsWith(\"percent\" /* MaskExpression.PERCENT */) &&\n            value.includes(\".\" /* MaskExpression.DOT */)) {\n            return value;\n        }\n        return value\n            ? value.replace(this._regExpForRemove(specialCharactersForRemove), \"\" /* MaskExpression.EMPTY_STRING */)\n            : value;\n    }\n    _removePrefix(value) {\n        if (!this.prefix) {\n            return value;\n        }\n        return value ? value.replace(this.prefix, \"\" /* MaskExpression.EMPTY_STRING */) : value;\n    }\n    _removeSuffix(value) {\n        if (!this.suffix) {\n            return value;\n        }\n        return value ? value.replace(this.suffix, \"\" /* MaskExpression.EMPTY_STRING */) : value;\n    }\n    _retrieveSeparatorValue(result) {\n        const specialCharacters = Array.isArray(this.dropSpecialCharacters)\n            ? this.specialCharacters.filter((v) => {\n                return this.dropSpecialCharacters.includes(v);\n            })\n            : this.specialCharacters;\n        return this._removeMask(result, specialCharacters);\n    }\n    _regExpForRemove(specialCharactersForRemove) {\n        return new RegExp(specialCharactersForRemove.map((item) => `\\\\${item}`).join('|'), 'gi');\n    }\n    _replaceDecimalMarkerToDot(value) {\n        const markers = Array.isArray(this.decimalMarker)\n            ? this.decimalMarker\n            : [this.decimalMarker];\n        return value.replace(this._regExpForRemove(markers), \".\" /* MaskExpression.DOT */);\n    }\n    _checkSymbols(result) {\n        if (result === \"\" /* MaskExpression.EMPTY_STRING */) {\n            return result;\n        }\n        if (this.maskExpression.startsWith(\"percent\" /* MaskExpression.PERCENT */) &&\n            this.decimalMarker === \",\" /* MaskExpression.COMMA */) {\n            // eslint-disable-next-line no-param-reassign\n            result = result.replace(\",\" /* MaskExpression.COMMA */, \".\" /* MaskExpression.DOT */);\n        }\n        const separatorPrecision = this._retrieveSeparatorPrecision(this.maskExpression);\n        const separatorValue = this._replaceDecimalMarkerToDot(this._retrieveSeparatorValue(result));\n        if (!this.isNumberValue) {\n            return separatorValue;\n        }\n        if (separatorPrecision) {\n            if (result === this.decimalMarker) {\n                return null;\n            }\n            if (this.separatorLimit.length > 14) {\n                return String(separatorValue);\n            }\n            return this._checkPrecision(this.maskExpression, separatorValue);\n        }\n        else {\n            return separatorValue;\n        }\n    }\n    // TODO should think about helpers or separting decimal precision to own property\n    _retrieveSeparatorPrecision(maskExpretion) {\n        const matcher = maskExpretion.match(new RegExp(`^separator\\\\.([^d]*)`));\n        return matcher ? Number(matcher[1]) : null;\n    }\n    _checkPrecision(separatorExpression, separatorValue) {\n        const separatorPrecision = separatorExpression.slice(10, 11);\n        if (separatorExpression.indexOf('2') > 0 ||\n            (this.leadZero && Number(separatorPrecision) > 1)) {\n            return this.leadZero\n                ? Number(separatorValue).toFixed(Number(separatorPrecision))\n                : Number(separatorValue).toFixed(2);\n        }\n        return this.numberToString(separatorValue);\n    }\n    _repeatPatternSymbols(maskExp) {\n        return ((maskExp.match(/{[0-9]+}/) &&\n            maskExp\n                .split(\"\" /* MaskExpression.EMPTY_STRING */)\n                .reduce((accum, currVal, index) => {\n                this._start =\n                    currVal === \"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */ ? index : this._start;\n                if (currVal !== \"}\" /* MaskExpression.CURLY_BRACKETS_RIGHT */) {\n                    return this._findSpecialChar(currVal) ? accum + currVal : accum;\n                }\n                this._end = index;\n                const repeatNumber = Number(maskExp.slice(this._start + 1, this._end));\n                const replaceWith = new Array(repeatNumber + 1).join(maskExp[this._start - 1]);\n                if (maskExp.slice(0, this._start).length > 1 &&\n                    maskExp.includes(\"S\" /* MaskExpression.LETTER_S */)) {\n                    const symbols = maskExp.slice(0, this._start - 1);\n                    return symbols.includes(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */)\n                        ? accum + replaceWith\n                        : symbols + accum + replaceWith;\n                }\n                else {\n                    return accum + replaceWith;\n                }\n            }, '')) ||\n            maskExp);\n    }\n    currentLocaleDecimalMarker() {\n        return (1.1).toLocaleString().substring(1, 2);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.8\", ngImport: i0, type: NgxMaskService, deps: null, target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.8\", ngImport: i0, type: NgxMaskService }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.8\", ngImport: i0, type: NgxMaskService, decorators: [{\n            type: Injectable\n        }] });\n\n/**\n * @internal\n */\nfunction _configFactory() {\n    const initConfig = inject(INITIAL_CONFIG);\n    const configValue = inject(NEW_CONFIG);\n    return configValue instanceof Function\n        ? { ...initConfig, ...configValue() }\n        : { ...initConfig, ...configValue };\n}\nfunction provideNgxMask(configValue) {\n    return [\n        {\n            provide: NEW_CONFIG,\n            useValue: configValue,\n        },\n        {\n            provide: INITIAL_CONFIG,\n            useValue: initialConfig,\n        },\n        {\n            provide: NGX_MASK_CONFIG,\n            useFactory: _configFactory,\n        },\n        NgxMaskService,\n    ];\n}\nfunction provideEnvironmentNgxMask(configValue) {\n    return makeEnvironmentProviders(provideNgxMask(configValue));\n}\n\nclass NgxMaskDirective {\n    constructor() {\n        // eslint-disable-next-line @angular-eslint/no-input-rename\n        this.maskExpression = '';\n        this.specialCharacters = [];\n        this.patterns = {};\n        this.prefix = '';\n        this.suffix = '';\n        this.thousandSeparator = ' ';\n        this.decimalMarker = '.';\n        this.dropSpecialCharacters = null;\n        this.hiddenInput = null;\n        this.showMaskTyped = null;\n        this.placeHolderCharacter = null;\n        this.shownMaskExpression = null;\n        this.showTemplate = null;\n        this.clearIfNotMatch = null;\n        this.validation = null;\n        this.separatorLimit = null;\n        this.allowNegativeNumbers = null;\n        this.leadZeroDateTime = null;\n        this.leadZero = null;\n        this.triggerOnMaskChange = null;\n        this.apm = null;\n        this.maskFilled = new EventEmitter();\n        this._maskValue = '';\n        this._position = null;\n        this._maskExpressionArray = [];\n        this._justPasted = false;\n        /**For IME composition event */\n        this._isComposing = false;\n        this.document = inject(DOCUMENT);\n        this._maskService = inject(NgxMaskService, { self: true });\n        this._config = inject(NGX_MASK_CONFIG);\n        // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-explicit-any\n        this.onChange = (_) => { };\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        this.onTouch = () => { };\n    }\n    ngOnChanges(changes) {\n        const { maskExpression, specialCharacters, patterns, prefix, suffix, thousandSeparator, decimalMarker, dropSpecialCharacters, hiddenInput, showMaskTyped, placeHolderCharacter, shownMaskExpression, showTemplate, clearIfNotMatch, validation, separatorLimit, allowNegativeNumbers, leadZeroDateTime, leadZero, triggerOnMaskChange, apm, } = changes;\n        if (maskExpression) {\n            if (maskExpression.currentValue !== maskExpression.previousValue &&\n                !maskExpression.firstChange) {\n                this._maskService.maskChanged = true;\n            }\n            if (allowNegativeNumbers) {\n                this._maskService.allowNegativeNumbers = allowNegativeNumbers.currentValue;\n                if (this._maskService.allowNegativeNumbers) {\n                    this._maskService.specialCharacters =\n                        this._maskService.specialCharacters.filter((c) => c !== \"-\" /* MaskExpression.MINUS */);\n                }\n            }\n            if (maskExpression.currentValue &&\n                maskExpression.currentValue.split(\"||\" /* MaskExpression.OR */).length > 1) {\n                this._maskExpressionArray = maskExpression.currentValue\n                    .split(\"||\" /* MaskExpression.OR */)\n                    .sort((a, b) => {\n                    return a.length - b.length;\n                });\n                this._setMask();\n            }\n            else {\n                this._maskExpressionArray = [];\n                this._maskValue = maskExpression.currentValue || \"\" /* MaskExpression.EMPTY_STRING */;\n                this._maskService.maskExpression = this._maskValue;\n            }\n        }\n        if (specialCharacters) {\n            if (!specialCharacters.currentValue || !Array.isArray(specialCharacters.currentValue)) {\n                return;\n            }\n            else {\n                this._maskService.specialCharacters = specialCharacters.currentValue || [];\n            }\n        }\n        // Only overwrite the mask available patterns if a pattern has actually been passed in\n        if (patterns && patterns.currentValue) {\n            this._maskService.patterns = patterns.currentValue;\n        }\n        if (apm && apm.currentValue) {\n            this._maskService.apm = apm.currentValue;\n        }\n        if (prefix) {\n            this._maskService.prefix = prefix.currentValue;\n        }\n        if (suffix) {\n            this._maskService.suffix = suffix.currentValue;\n        }\n        if (thousandSeparator) {\n            this._maskService.thousandSeparator = thousandSeparator.currentValue;\n        }\n        if (decimalMarker) {\n            this._maskService.decimalMarker = decimalMarker.currentValue;\n        }\n        if (dropSpecialCharacters) {\n            this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\n        }\n        if (hiddenInput) {\n            this._maskService.hiddenInput = hiddenInput.currentValue;\n        }\n        if (showMaskTyped) {\n            this._maskService.showMaskTyped = showMaskTyped.currentValue;\n        }\n        if (placeHolderCharacter) {\n            this._maskService.placeHolderCharacter = placeHolderCharacter.currentValue;\n        }\n        if (shownMaskExpression) {\n            this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\n        }\n        if (showTemplate) {\n            this._maskService.showTemplate = showTemplate.currentValue;\n        }\n        if (clearIfNotMatch) {\n            this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\n        }\n        if (validation) {\n            this._maskService.validation = validation.currentValue;\n        }\n        if (separatorLimit) {\n            this._maskService.separatorLimit = separatorLimit.currentValue;\n        }\n        if (leadZeroDateTime) {\n            this._maskService.leadZeroDateTime = leadZeroDateTime.currentValue;\n        }\n        if (leadZero) {\n            this._maskService.leadZero = leadZero.currentValue;\n        }\n        if (triggerOnMaskChange) {\n            this._maskService.triggerOnMaskChange = triggerOnMaskChange.currentValue;\n        }\n        this._applyMask();\n    }\n    // eslint-disable-next-line complexity\n    validate({ value }) {\n        if (!this._maskService.validation || !this._maskValue) {\n            return null;\n        }\n        if (this._maskService.ipError) {\n            return this._createValidationError(value);\n        }\n        if (this._maskService.cpfCnpjError) {\n            return this._createValidationError(value);\n        }\n        if (this._maskValue.startsWith(\"separator\" /* MaskExpression.SEPARATOR */)) {\n            return null;\n        }\n        if (withoutValidation.includes(this._maskValue)) {\n            return null;\n        }\n        if (this._maskService.clearIfNotMatch) {\n            return null;\n        }\n        if (timeMasks.includes(this._maskValue)) {\n            return this._validateTime(value);\n        }\n        if (value && value.toString().length >= 1) {\n            let counterOfOpt = 0;\n            if (this._maskValue.startsWith(\"percent\" /* MaskExpression.PERCENT */)) {\n                return null;\n            }\n            for (const key in this._maskService.patterns) {\n                if (this._maskService.patterns[key]?.optional) {\n                    if (this._maskValue.indexOf(key) !== this._maskValue.lastIndexOf(key)) {\n                        const opt = this._maskValue\n                            .split(\"\" /* MaskExpression.EMPTY_STRING */)\n                            .filter((i) => i === key)\n                            .join(\"\" /* MaskExpression.EMPTY_STRING */);\n                        counterOfOpt += opt.length;\n                    }\n                    else if (this._maskValue.indexOf(key) !== -1) {\n                        counterOfOpt++;\n                    }\n                    if (this._maskValue.indexOf(key) !== -1 &&\n                        value.toString().length >= this._maskValue.indexOf(key)) {\n                        return null;\n                    }\n                    if (counterOfOpt === this._maskValue.length) {\n                        return null;\n                    }\n                }\n            }\n            if (this._maskValue.indexOf(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */) === 1 &&\n                value.toString().length ===\n                    this._maskValue.length +\n                        Number((this._maskValue.split(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */)[1] ??\n                            \"\" /* MaskExpression.EMPTY_STRING */).split(\"}\" /* MaskExpression.CURLY_BRACKETS_RIGHT */)[0]) -\n                        4) {\n                return null;\n            }\n            else if ((this._maskValue.indexOf(\"*\" /* MaskExpression.SYMBOL_STAR */) > 1 &&\n                value.toString().length <\n                    this._maskValue.indexOf(\"*\" /* MaskExpression.SYMBOL_STAR */)) ||\n                (this._maskValue.indexOf(\"?\" /* MaskExpression.SYMBOL_QUESTION */) > 1 &&\n                    value.toString().length <\n                        this._maskValue.indexOf(\"?\" /* MaskExpression.SYMBOL_QUESTION */)) ||\n                this._maskValue.indexOf(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */) === 1) {\n                return this._createValidationError(value);\n            }\n            if (this._maskValue.indexOf(\"*\" /* MaskExpression.SYMBOL_STAR */) === -1 ||\n                this._maskValue.indexOf(\"?\" /* MaskExpression.SYMBOL_QUESTION */) === -1) {\n                const array = this._maskValue.split('*');\n                const length = this._maskService.dropSpecialCharacters\n                    ? this._maskValue.length -\n                        this._maskService.checkSpecialCharAmount(this._maskValue) -\n                        counterOfOpt\n                    : this.prefix\n                        ? this._maskValue.length + this.prefix.length - counterOfOpt\n                        : this._maskValue.length - counterOfOpt;\n                if (array.length === 1) {\n                    if (value.toString().length < length) {\n                        return this._createValidationError(value);\n                    }\n                }\n                if (array.length > 1) {\n                    const lastIndexArray = array[array.length - 1];\n                    if (lastIndexArray &&\n                        this._maskService.specialCharacters.includes(lastIndexArray[0]) &&\n                        value.includes(lastIndexArray[0]) &&\n                        !this.dropSpecialCharacters) {\n                        const special = value.split(lastIndexArray[0]);\n                        return special[special.length - 1].length === lastIndexArray.length - 1\n                            ? null\n                            : this._createValidationError(value);\n                    }\n                    else if (((lastIndexArray &&\n                        !this._maskService.specialCharacters.includes(lastIndexArray[0])) ||\n                        !lastIndexArray ||\n                        this._maskService.dropSpecialCharacters) &&\n                        value.length >= length - 1) {\n                        return null;\n                    }\n                    else {\n                        return this._createValidationError(value);\n                    }\n                }\n            }\n            if (this._maskValue.indexOf(\"*\" /* MaskExpression.SYMBOL_STAR */) === 1 ||\n                this._maskValue.indexOf(\"?\" /* MaskExpression.SYMBOL_QUESTION */) === 1) {\n                return null;\n            }\n        }\n        if (value) {\n            this.maskFilled.emit();\n            return null;\n        }\n        return null;\n    }\n    onPaste() {\n        this._justPasted = true;\n    }\n    onModelChange(value) {\n        // on form reset we need to update the actualValue\n        if ((value === \"\" /* MaskExpression.EMPTY_STRING */ || value === null || value === undefined) &&\n            this._maskService.actualValue) {\n            this._maskService.actualValue = this._maskService.getActualValue(\"\" /* MaskExpression.EMPTY_STRING */);\n        }\n    }\n    onInput(e) {\n        // If IME is composing text, we wait for the composed text.\n        if (this._isComposing)\n            return;\n        const el = e.target;\n        this._inputValue = el.value;\n        this._setMask();\n        if (!this._maskValue) {\n            this.onChange(el.value);\n            return;\n        }\n        let position = el.selectionStart === 1\n            ? el.selectionStart + this._maskService.prefix.length\n            : el.selectionStart;\n        let caretShift = 0;\n        let backspaceShift = false;\n        if (this._code === \"Delete\" /* MaskExpression.DELETE */ && \"separator\" /* MaskExpression.SEPARATOR */) {\n            this._maskService.deletedSpecialCharacter = true;\n        }\n        if (this._inputValue.length >= this._maskService.maskExpression.length - 1 &&\n            this._code !== \"Backspace\" /* MaskExpression.BACKSPACE */ &&\n            this._maskService.maskExpression === \"d0/M0/0000\" /* MaskExpression.DAYS_MONTHS_YEARS */ &&\n            position < 10) {\n            const inputSymbol = this._inputValue.slice(position - 1, position);\n            el.value =\n                this._inputValue.slice(0, position - 1) +\n                    inputSymbol +\n                    this._inputValue.slice(position + 1);\n        }\n        this._maskService.applyValueChanges(position, this._justPasted, this._code === \"Backspace\" /* MaskExpression.BACKSPACE */ || this._code === \"Delete\" /* MaskExpression.DELETE */, (shift, _backspaceShift) => {\n            this._justPasted = false;\n            caretShift = shift;\n            backspaceShift = _backspaceShift;\n        });\n        // only set the selection if the element is active\n        if (this._getActiveElement() !== el) {\n            return;\n        }\n        // update position after applyValueChanges to prevent cursor on wrong position when it has an array of maskExpression\n        if (this._maskExpressionArray.length) {\n            if (this._code === \"Backspace\" /* MaskExpression.BACKSPACE */) {\n                position = this.specialCharacters.includes(this._inputValue.slice(position - 1, position))\n                    ? position - 1\n                    : position;\n            }\n            else {\n                position =\n                    el.selectionStart === 1\n                        ? el.selectionStart + this._maskService.prefix.length\n                        : el.selectionStart;\n            }\n        }\n        this._position =\n            this._position === 1 && this._inputValue.length === 1 ? null : this._position;\n        let positionToApply = this._position\n            ? this._inputValue.length + position + caretShift\n            : position +\n                (this._code === \"Backspace\" /* MaskExpression.BACKSPACE */ && !backspaceShift ? 0 : caretShift);\n        if (positionToApply > this._getActualInputLength()) {\n            positionToApply = this._getActualInputLength();\n        }\n        if (positionToApply < 0) {\n            positionToApply = 0;\n        }\n        el.setSelectionRange(positionToApply, positionToApply);\n        this._position = null;\n    }\n    // IME starts\n    onCompositionStart() {\n        this._isComposing = true;\n    }\n    // IME completes\n    onCompositionEnd(e) {\n        this._isComposing = false;\n        this._justPasted = true;\n        this.onInput(e);\n    }\n    onBlur(e) {\n        if (this._maskValue) {\n            const el = e.target;\n            if (this.leadZero && el.value.length > 0 && typeof this.decimalMarker === 'string') {\n                const maskExpression = this._maskService.maskExpression;\n                const precision = Number(this._maskService.maskExpression.slice(maskExpression.length - 1, maskExpression.length));\n                if (precision > 1) {\n                    el.value = this.suffix ? el.value.split(this.suffix).join('') : el.value;\n                    const decimalPart = el.value.split(this.decimalMarker)[1];\n                    el.value = el.value.includes(this.decimalMarker)\n                        ? el.value +\n                            \"0\" /* MaskExpression.NUMBER_ZERO */.repeat(precision - decimalPart.length) +\n                            this.suffix\n                        : el.value +\n                            this.decimalMarker +\n                            \"0\" /* MaskExpression.NUMBER_ZERO */.repeat(precision) +\n                            this.suffix;\n                    this._maskService.actualValue = el.value;\n                }\n            }\n            this._maskService.clearIfNotMatchFn();\n        }\n        this.onTouch();\n    }\n    onClick(e) {\n        if (!this._maskValue) {\n            return;\n        }\n        const el = e.target;\n        const posStart = 0;\n        const posEnd = 0;\n        if (el !== null &&\n            el.selectionStart !== null &&\n            el.selectionStart === el.selectionEnd &&\n            el.selectionStart > this._maskService.prefix.length &&\n            // eslint-disable-next-line\n            e.keyCode !== 38) {\n            if (this._maskService.showMaskTyped) {\n                // We are showing the mask in the input\n                this._maskService.maskIsShown = this._maskService.showMaskInInput();\n                if (el.setSelectionRange &&\n                    this._maskService.prefix + this._maskService.maskIsShown === el.value) {\n                    // the input ONLY contains the mask, so position the cursor at the start\n                    el.focus();\n                    el.setSelectionRange(posStart, posEnd);\n                }\n                else {\n                    // the input contains some characters already\n                    if (el.selectionStart > this._maskService.actualValue.length) {\n                        // if the user clicked beyond our value's length, position the cursor at the end of our value\n                        el.setSelectionRange(this._maskService.actualValue.length, this._maskService.actualValue.length);\n                    }\n                }\n            }\n        }\n        const nextValue = el &&\n            (el.value === this._maskService.prefix\n                ? this._maskService.prefix + this._maskService.maskIsShown\n                : el.value);\n        /** Fix of cursor position jumping to end in most browsers no matter where cursor is inserted onFocus */\n        if (el && el.value !== nextValue) {\n            el.value = nextValue;\n        }\n        /** fix of cursor position with prefix when mouse click occur */\n        if (el &&\n            (el.selectionStart || el.selectionEnd) <=\n                this._maskService.prefix.length) {\n            el.selectionStart = this._maskService.prefix.length;\n            return;\n        }\n        /** select only inserted text */\n        if (el && el.selectionEnd > this._getActualInputLength()) {\n            el.selectionEnd = this._getActualInputLength();\n        }\n    }\n    // eslint-disable-next-line complexity\n    onKeyDown(e) {\n        if (!this._maskValue) {\n            return;\n        }\n        if (this._isComposing) {\n            // User finalize their choice from IME composition, so trigger onInput() for the composed text.\n            if (e.key === 'Enter')\n                this.onCompositionEnd(e);\n            return;\n        }\n        this._code = e.code ? e.code : e.key;\n        const el = e.target;\n        this._inputValue = el.value;\n        this._setMask();\n        if (e.key === \"ArrowUp\" /* MaskExpression.ARROW_UP */) {\n            e.preventDefault();\n        }\n        if (e.key === \"ArrowLeft\" /* MaskExpression.ARROW_LEFT */ ||\n            e.key === \"Backspace\" /* MaskExpression.BACKSPACE */ ||\n            e.key === \"Delete\" /* MaskExpression.DELETE */) {\n            if (e.key === \"Backspace\" /* MaskExpression.BACKSPACE */ && el.value.length === 0) {\n                el.selectionStart = el.selectionEnd;\n            }\n            if (e.key === \"Backspace\" /* MaskExpression.BACKSPACE */ && el.selectionStart !== 0) {\n                // If specialChars is false, (shouldn't ever happen) then set to the defaults\n                this.specialCharacters = this.specialCharacters?.length\n                    ? this.specialCharacters\n                    : this._config.specialCharacters;\n                if (this.prefix.length > 1 && el.selectionStart <= this.prefix.length) {\n                    el.setSelectionRange(this.prefix.length, el.selectionEnd);\n                }\n                else {\n                    if (this._inputValue.length !== el.selectionStart &&\n                        el.selectionStart !== 1) {\n                        while (this.specialCharacters.includes((this._inputValue[el.selectionStart - 1] ??\n                            \"\" /* MaskExpression.EMPTY_STRING */).toString()) &&\n                            ((this.prefix.length >= 1 &&\n                                el.selectionStart > this.prefix.length) ||\n                                this.prefix.length === 0)) {\n                            el.setSelectionRange(el.selectionStart - 1, el.selectionEnd);\n                        }\n                    }\n                }\n            }\n            this.checkSelectionOnDeletion(el);\n            if (this._maskService.prefix.length &&\n                el.selectionStart <= this._maskService.prefix.length &&\n                el.selectionEnd <= this._maskService.prefix.length) {\n                e.preventDefault();\n            }\n            const cursorStart = el.selectionStart;\n            if (e.key === \"Backspace\" /* MaskExpression.BACKSPACE */ &&\n                !el.readOnly &&\n                cursorStart === 0 &&\n                el.selectionEnd === el.value.length &&\n                el.value.length !== 0) {\n                this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\n                this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\n            }\n        }\n        if (!!this.suffix &&\n            this.suffix.length > 1 &&\n            this._inputValue.length - this.suffix.length < el.selectionStart) {\n            el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n        }\n        else if ((e.code === 'KeyA' && e.ctrlKey) ||\n            (e.code === 'KeyA' && e.metaKey) // Cmd + A (Mac)\n        ) {\n            el.setSelectionRange(0, this._getActualInputLength());\n            e.preventDefault();\n        }\n        this._maskService.selStart = el.selectionStart;\n        this._maskService.selEnd = el.selectionEnd;\n    }\n    /** It writes the value in the input */\n    async writeValue(inputValue) {\n        if (typeof inputValue === 'object' && inputValue !== null && 'value' in inputValue) {\n            if ('disable' in inputValue) {\n                this.setDisabledState(Boolean(inputValue.disable));\n            }\n            // eslint-disable-next-line no-param-reassign\n            inputValue = inputValue.value;\n        }\n        if (typeof inputValue === 'number' ||\n            this._maskValue.startsWith(\"separator\" /* MaskExpression.SEPARATOR */)) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = String(inputValue);\n            const localeDecimalMarker = this._maskService.currentLocaleDecimalMarker();\n            if (!Array.isArray(this._maskService.decimalMarker)) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue =\n                    this._maskService.decimalMarker !== localeDecimalMarker\n                        ? inputValue.replace(localeDecimalMarker, this._maskService.decimalMarker)\n                        : inputValue;\n            }\n            if (this._maskService.leadZero &&\n                inputValue &&\n                this.maskExpression &&\n                this.dropSpecialCharacters !== false) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = this._maskService._checkPrecision(this.maskExpression.toString(), inputValue);\n            }\n            if (this._maskService.decimalMarker === \",\" /* MaskExpression.COMMA */) {\n                // eslint-disable-next-line no-param-reassign\n                inputValue = inputValue\n                    .toString()\n                    .replace(\".\" /* MaskExpression.DOT */, \",\" /* MaskExpression.COMMA */);\n            }\n            if (this.maskExpression?.startsWith(\"separator\" /* MaskExpression.SEPARATOR */) && this.leadZero) {\n                requestAnimationFrame(() => {\n                    this._maskService.applyMask(inputValue.toString(), this._maskService.maskExpression);\n                });\n            }\n            this._maskService.isNumberValue = true;\n        }\n        if (typeof inputValue !== 'string') {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = '';\n        }\n        this._inputValue = inputValue;\n        this._setMask();\n        if ((inputValue && this._maskService.maskExpression) ||\n            (this._maskService.maskExpression &&\n                (this._maskService.prefix || this._maskService.showMaskTyped))) {\n            // Let the service we know we are writing value so that triggering onChange function won't happen during applyMask\n            this._maskService.writingValue = true;\n            this._maskService.formElementProperty = [\n                'value',\n                this._maskService.applyMask(inputValue, this._maskService.maskExpression),\n            ];\n            // Let the service know we've finished writing value\n            this._maskService.writingValue = false;\n        }\n        else {\n            this._maskService.formElementProperty = ['value', inputValue];\n        }\n        this._inputValue = inputValue;\n    }\n    registerOnChange(fn) {\n        this._maskService.onChange = this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouch = fn;\n    }\n    _getActiveElement(document = this.document) {\n        const shadowRootEl = document?.activeElement?.shadowRoot;\n        if (!shadowRootEl?.activeElement) {\n            return document.activeElement;\n        }\n        else {\n            return this._getActiveElement(shadowRootEl);\n        }\n    }\n    checkSelectionOnDeletion(el) {\n        el.selectionStart = Math.min(Math.max(this.prefix.length, el.selectionStart), this._inputValue.length - this.suffix.length);\n        el.selectionEnd = Math.min(Math.max(this.prefix.length, el.selectionEnd), this._inputValue.length - this.suffix.length);\n    }\n    /** It disables the input element */\n    setDisabledState(isDisabled) {\n        this._maskService.formElementProperty = ['disabled', isDisabled];\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _applyMask() {\n        this._maskService.maskExpression = this._maskService._repeatPatternSymbols(this._maskValue || '');\n        this._maskService.formElementProperty = [\n            'value',\n            this._maskService.applyMask(this._inputValue, this._maskService.maskExpression),\n        ];\n    }\n    _validateTime(value) {\n        const rowMaskLen = this._maskValue\n            .split(\"\" /* MaskExpression.EMPTY_STRING */)\n            .filter((s) => s !== ':').length;\n        if (!value) {\n            return null; // Don't validate empty values to allow for optional form control\n        }\n        if ((+(value[value.length - 1] ?? -1) === 0 && value.length < rowMaskLen) ||\n            value.length <= rowMaskLen - 2) {\n            return this._createValidationError(value);\n        }\n        return null;\n    }\n    _getActualInputLength() {\n        return (this._maskService.actualValue.length ||\n            this._maskService.actualValue.length + this._maskService.prefix.length);\n    }\n    _createValidationError(actualValue) {\n        return {\n            mask: {\n                requiredMask: this._maskValue,\n                actualValue,\n            },\n        };\n    }\n    _setMask() {\n        this._maskExpressionArray.some((mask) => {\n            const specialChart = mask\n                .split(\"\" /* MaskExpression.EMPTY_STRING */)\n                .some((char) => this._maskService.specialCharacters.includes(char));\n            if ((specialChart && this._inputValue && !mask.includes(\"S\" /* MaskExpression.LETTER_S */)) ||\n                mask.includes(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */)) {\n                const test = this._maskService.removeMask(this._inputValue)?.length <=\n                    this._maskService.removeMask(mask)?.length;\n                if (test) {\n                    this._maskValue =\n                        this.maskExpression =\n                            this._maskService.maskExpression =\n                                mask.includes(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */)\n                                    ? this._maskService._repeatPatternSymbols(mask)\n                                    : mask;\n                    return test;\n                }\n                else {\n                    const expression = this._maskExpressionArray[this._maskExpressionArray.length - 1] ??\n                        \"\" /* MaskExpression.EMPTY_STRING */;\n                    this._maskValue =\n                        this.maskExpression =\n                            this._maskService.maskExpression =\n                                expression.includes(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */)\n                                    ? this._maskService._repeatPatternSymbols(expression)\n                                    : expression;\n                }\n            }\n            else {\n                const check = this._inputValue\n                    ?.split(\"\" /* MaskExpression.EMPTY_STRING */)\n                    .every((character, index) => {\n                    const indexMask = mask.charAt(index);\n                    return this._maskService._checkSymbolMask(character, indexMask);\n                });\n                if (check) {\n                    this._maskValue = this.maskExpression = this._maskService.maskExpression = mask;\n                    return check;\n                }\n            }\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.8\", ngImport: i0, type: NgxMaskDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.8\", type: NgxMaskDirective, isStandalone: true, selector: \"input[mask], textarea[mask]\", inputs: { maskExpression: [\"mask\", \"maskExpression\"], specialCharacters: \"specialCharacters\", patterns: \"patterns\", prefix: \"prefix\", suffix: \"suffix\", thousandSeparator: \"thousandSeparator\", decimalMarker: \"decimalMarker\", dropSpecialCharacters: \"dropSpecialCharacters\", hiddenInput: \"hiddenInput\", showMaskTyped: \"showMaskTyped\", placeHolderCharacter: \"placeHolderCharacter\", shownMaskExpression: \"shownMaskExpression\", showTemplate: \"showTemplate\", clearIfNotMatch: \"clearIfNotMatch\", validation: \"validation\", separatorLimit: \"separatorLimit\", allowNegativeNumbers: \"allowNegativeNumbers\", leadZeroDateTime: \"leadZeroDateTime\", leadZero: \"leadZero\", triggerOnMaskChange: \"triggerOnMaskChange\", apm: \"apm\" }, outputs: { maskFilled: \"maskFilled\" }, host: { listeners: { \"paste\": \"onPaste()\", \"ngModelChange\": \"onModelChange($event)\", \"input\": \"onInput($event)\", \"compositionstart\": \"onCompositionStart($event)\", \"compositionend\": \"onCompositionEnd($event)\", \"blur\": \"onBlur($event)\", \"click\": \"onClick($event)\", \"keydown\": \"onKeyDown($event)\" } }, providers: [\n            {\n                provide: NG_VALUE_ACCESSOR,\n                useExisting: NgxMaskDirective,\n                multi: true,\n            },\n            {\n                provide: NG_VALIDATORS,\n                useExisting: NgxMaskDirective,\n                multi: true,\n            },\n            NgxMaskService,\n        ], exportAs: [\"mask\", \"ngxMask\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.8\", ngImport: i0, type: NgxMaskDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[mask], textarea[mask]',\n                    standalone: true,\n                    providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: NgxMaskDirective,\n                            multi: true,\n                        },\n                        {\n                            provide: NG_VALIDATORS,\n                            useExisting: NgxMaskDirective,\n                            multi: true,\n                        },\n                        NgxMaskService,\n                    ],\n                    exportAs: 'mask,ngxMask',\n                }]\n        }], propDecorators: { maskExpression: [{\n                type: Input,\n                args: ['mask']\n            }], specialCharacters: [{\n                type: Input\n            }], patterns: [{\n                type: Input\n            }], prefix: [{\n                type: Input\n            }], suffix: [{\n                type: Input\n            }], thousandSeparator: [{\n                type: Input\n            }], decimalMarker: [{\n                type: Input\n            }], dropSpecialCharacters: [{\n                type: Input\n            }], hiddenInput: [{\n                type: Input\n            }], showMaskTyped: [{\n                type: Input\n            }], placeHolderCharacter: [{\n                type: Input\n            }], shownMaskExpression: [{\n                type: Input\n            }], showTemplate: [{\n                type: Input\n            }], clearIfNotMatch: [{\n                type: Input\n            }], validation: [{\n                type: Input\n            }], separatorLimit: [{\n                type: Input\n            }], allowNegativeNumbers: [{\n                type: Input\n            }], leadZeroDateTime: [{\n                type: Input\n            }], leadZero: [{\n                type: Input\n            }], triggerOnMaskChange: [{\n                type: Input\n            }], apm: [{\n                type: Input\n            }], maskFilled: [{\n                type: Output\n            }], onPaste: [{\n                type: HostListener,\n                args: ['paste']\n            }], onModelChange: [{\n                type: HostListener,\n                args: ['ngModelChange', ['$event']]\n            }], onInput: [{\n                type: HostListener,\n                args: ['input', ['$event']]\n            }], onCompositionStart: [{\n                type: HostListener,\n                args: ['compositionstart', ['$event']]\n            }], onCompositionEnd: [{\n                type: HostListener,\n                args: ['compositionend', ['$event']]\n            }], onBlur: [{\n                type: HostListener,\n                args: ['blur', ['$event']]\n            }], onClick: [{\n                type: HostListener,\n                args: ['click', ['$event']]\n            }], onKeyDown: [{\n                type: HostListener,\n                args: ['keydown', ['$event']]\n            }] } });\n\nclass NgxMaskPipe {\n    constructor() {\n        this.defaultOptions = {};\n        this._maskService = inject(NgxMaskService);\n        this._maskExpressionArray = [];\n        this.mask = '';\n    }\n    transform(value, mask, { patterns, ...config } = {}) {\n        const currentConfig = {\n            maskExpression: mask,\n            ...this.defaultOptions,\n            ...config,\n            patterns: {\n                ...this._maskService.patterns,\n                ...patterns,\n            },\n        };\n        Object.entries(currentConfig).forEach(([key, value]) => {\n            //eslint-disable-next-line  @typescript-eslint/no-explicit-any\n            this._maskService[key] = value;\n        });\n        if (mask.includes('||')) {\n            if (mask.split('||').length > 1) {\n                this._maskExpressionArray = mask.split('||').sort((a, b) => {\n                    return a.length - b.length;\n                });\n                this._setMask(value);\n                return this._maskService.applyMask(`${value}`, this.mask);\n            }\n            else {\n                this._maskExpressionArray = [];\n                return this._maskService.applyMask(`${value}`, this.mask);\n            }\n        }\n        if (mask.includes(\"{\" /* MaskExpression.CURLY_BRACKETS_LEFT */)) {\n            return this._maskService.applyMask(`${value}`, this._maskService._repeatPatternSymbols(mask));\n        }\n        if (mask.startsWith(\"separator\" /* MaskExpression.SEPARATOR */)) {\n            if (config.decimalMarker) {\n                this._maskService.decimalMarker = config.decimalMarker;\n            }\n            if (config.thousandSeparator) {\n                this._maskService.thousandSeparator = config.thousandSeparator;\n            }\n            if (config.leadZero) {\n                // eslint-disable-next-line no-param-reassign\n                this._maskService.leadZero = config.leadZero;\n            }\n            // eslint-disable-next-line no-param-reassign\n            value = String(value);\n            const localeDecimalMarker = this._maskService.currentLocaleDecimalMarker();\n            if (!Array.isArray(this._maskService.decimalMarker)) {\n                // eslint-disable-next-line no-param-reassign\n                value =\n                    this._maskService.decimalMarker !== localeDecimalMarker\n                        ? value.replace(localeDecimalMarker, this._maskService.decimalMarker)\n                        : value;\n            }\n            if (this._maskService.leadZero &&\n                value &&\n                this._maskService.dropSpecialCharacters !== false) {\n                // eslint-disable-next-line no-param-reassign\n                value = this._maskService._checkPrecision(mask, value);\n            }\n            if (this._maskService.decimalMarker === \",\" /* MaskExpression.COMMA */) {\n                // eslint-disable-next-line no-param-reassign\n                value = value.toString().replace(\".\" /* MaskExpression.DOT */, \",\" /* MaskExpression.COMMA */);\n            }\n            this._maskService.isNumberValue = true;\n        }\n        return this._maskService.applyMask(`${value}`, mask);\n    }\n    _setMask(value) {\n        if (this._maskExpressionArray.length > 0) {\n            this._maskExpressionArray.some((mask) => {\n                const test = this._maskService.removeMask(value)?.length <=\n                    this._maskService.removeMask(mask)?.length;\n                if (value && test) {\n                    this.mask = mask;\n                    return test;\n                }\n                else {\n                    const expression = this._maskExpressionArray[this._maskExpressionArray.length - 1] ??\n                        \"\" /* MaskExpression.EMPTY_STRING */;\n                    this.mask = expression;\n                }\n            });\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.8\", ngImport: i0, type: NgxMaskPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }\n    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"16.1.8\", ngImport: i0, type: NgxMaskPipe, isStandalone: true, name: \"mask\" }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.8\", ngImport: i0, type: NgxMaskPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'mask',\n                    pure: true,\n                    standalone: true,\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { INITIAL_CONFIG, NEW_CONFIG, NGX_MASK_CONFIG, NgxMaskDirective, NgxMaskPipe, NgxMaskService, initialConfig, provideEnvironmentNgxMask, provideNgxMask, timeMasks, withoutValidation };\n"],"names":["i0","InjectionToken","EventEmitter","inject","Injectable","ElementRef","Renderer2","makeEnvironmentProviders","Directive","Input","Output","HostListener","Pipe","DOCUMENT","NG_VALUE_ACCESSOR","NG_VALIDATORS","NGX_MASK_CONFIG","NEW_CONFIG","INITIAL_CONFIG","initialConfig","suffix","prefix","thousandSeparator","decimalMarker","clearIfNotMatch","showTemplate","showMaskTyped","placeHolderCharacter","dropSpecialCharacters","hiddenInput","undefined","shownMaskExpression","separatorLimit","allowNegativeNumbers","validation","specialCharacters","leadZeroDateTime","apm","leadZero","triggerOnMaskChange","maskFilled","patterns","pattern","RegExp","optional","X","symbol","A","S","U","L","d","m","M","H","h","s","timeMasks","withoutValidation","NgxMaskApplierService","constructor","_config","_shift","Set","maskExpression","actualValue","deletedSpecialCharacter","_formatWithSeparators","str","thousandSeparatorChar","decimalChars","precision","x","decimalChar","Array","isArray","regExp","map","v","indexOf","join","split","match","decimals","length","res","replace","slice","rgx","test","substring","percentage","sanitizedStr","value","Number","isNaN","getPrecision","Infinity","checkAndRemoveSuffix","inputValue","i","substr","includes","checkInputPrecision","marker","find","dm","precisionRegEx","_charToRegExpExpression","precisionMatch","precisionMatchLength","diff","_compareOrIncludes","applyMaskWithPattern","maskAndPattern","mask","customPattern","applyMask","position","justPasted","backspaced","cb","cursor","result","multi","backspaceShift","shift","stepBack","inputArray","toString","valuesIP","ipError","_validIP","arr","push","cpfCnpjError","startsWith","_stripToDecimal","base","_splitPercentZero","thousandSeparatorCharEscaped","invalidChars","invalidCharRegexp","strForSep","commaShift","shiftStep","add","clear","inputSymbol","symbolStarInPattern","_checkSymbolMask","_shiftStep","daysCount","inputValueCursor","inputValueCursorPlusOne","inputValueCursorPlusTwo","inputValueCursorMinusOne","inputValueCursorMinusTwo","inputValueCursorMinusThree","inputValueSliceMinusThreeMinusOne","inputValueSliceMinusOnePlusOne","inputValueSliceCursorPlusTwo","inputValueSliceMinusTwoCursor","maskStartWithMonth","startWithMonthInput","monthsCount","withoutDays","specialChart","day1monthInput","day2monthInput","day2monthInputDot","day1monthPaste","day2monthPaste","_findSpecialChar","newPosition","has","actualShift","onlySpecial","every","char","val","maskSymbol","filter","idx","isDecimalMarker","charsToEscape","inputLength","comparedValue","excludedValue","some","index","decimalIndex","parsedValue","parseInt","integerPart","decimalPart","integerString","decimal","ɵfac","NgxMaskApplierService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","ngDevMode","ɵsetClassMetadata","type","NgxMaskService","arguments","isNumberValue","maskIsShown","selStart","selEnd","writingValue","maskChanged","_maskExpressionArray","_emitValue","_previousValue","_currentValue","onChange","_","document","_elementRef","_renderer","showMaskInInput","formControlResult","getSymbol","newInputValue","actualResult","splice","removeMask","shiftTypedSymbols","Boolean","getActualValue","item","hideInput","resLen","prefNmask","countSkipedSymbol","_numberSkipedSymbols","regex","exec","applyValueChanges","formElement","nativeElement","_getActiveElement","clearIfNotMatchFn","curr","compare","maskChar","symbolToReplace","currSymbol","replaceSymbol","numberToString","String","toLocaleString","useGrouping","maximumFractionDigits","inputVal","Error","_checkForIp","_checkForCpfCnpj","formElementProperty","name","Promise","resolve","then","setProperty","checkSpecialCharAmount","chars","_removeMask","_removeSuffix","_removePrefix","concat","cpf","cnpj","shadowRootEl","activeElement","shadowRoot","_toNumber","_checkSymbols","num","specialCharactersForRemove","_regExpForRemove","_retrieveSeparatorValue","_replaceDecimalMarkerToDot","markers","separatorPrecision","_retrieveSeparatorPrecision","separatorValue","_checkPrecision","maskExpretion","matcher","separatorExpression","toFixed","_repeatPatternSymbols","maskExp","reduce","accum","currVal","_start","_end","repeatNumber","replaceWith","symbols","currentLocaleDecimalMarker","ɵNgxMaskService_BaseFactory","NgxMaskService_Factory","ɵɵgetInheritedFactory","_configFactory","initConfig","configValue","Function","provideNgxMask","provide","useValue","useFactory","provideEnvironmentNgxMask","NgxMaskDirective","_maskValue","_position","_justPasted","_isComposing","_maskService","self","onTouch","ngOnChanges","changes","currentValue","previousValue","firstChange","c","sort","a","b","_setMask","_applyMask","validate","_createValidationError","_validateTime","counterOfOpt","key","lastIndexOf","opt","array","lastIndexArray","special","emit","onPaste","onModelChange","onInput","e","el","target","_inputValue","selectionStart","caretShift","_code","_backspaceShift","positionToApply","_getActualInputLength","setSelectionRange","onCompositionStart","onCompositionEnd","onBlur","repeat","onClick","posStart","posEnd","selectionEnd","keyCode","focus","nextValue","onKeyDown","code","preventDefault","checkSelectionOnDeletion","cursorStart","readOnly","ctrlKey","metaKey","writeValue","_this","_asyncToGenerator","setDisabledState","disable","localeDecimalMarker","requestAnimationFrame","registerOnChange","fn","registerOnTouched","Math","min","max","isDisabled","rowMaskLen","requiredMask","expression","check","character","indexMask","charAt","NgxMaskDirective_Factory","ɵdir","ɵɵdefineDirective","selectors","hostBindings","NgxMaskDirective_HostBindings","rf","ctx","ɵɵlistener","NgxMaskDirective_paste_HostBindingHandler","NgxMaskDirective_ngModelChange_HostBindingHandler","$event","NgxMaskDirective_input_HostBindingHandler","NgxMaskDirective_compositionstart_HostBindingHandler","NgxMaskDirective_compositionend_HostBindingHandler","NgxMaskDirective_blur_HostBindingHandler","NgxMaskDirective_click_HostBindingHandler","NgxMaskDirective_keydown_HostBindingHandler","inputs","outputs","exportAs","standalone","features","ɵɵProvidersFeature","useExisting","ɵɵNgOnChangesFeature","args","selector","providers","NgxMaskPipe","defaultOptions","transform","config","currentConfig","Object","entries","forEach","NgxMaskPipe_Factory","ɵpipe","ɵɵdefinePipe","pure"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}